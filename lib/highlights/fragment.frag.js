'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fragment = "#define GLSLIFY 1\nprecision highp float;\nin vec2 vTextureCoord;\nout vec4 finalColor;\nuniform sampler2D uTexture;\nuniform float uValue;\nconst float epsilon = 0.000001;\nconst float mx = 1.0 - epsilon;\nconst float PI = 3.1415926535897932384626433832795;\nconst mat3 matRGBtoROMM = mat3(0.5293459296226501, 0.3300727903842926, 0.14058130979537964, 0.09837432950735092, 0.8734610080718994, 0.028164653107523918, 0.01688321679830551, 0.11767247319221497, 0.8654443025588989);\nconst mat3 matROMMtoRGB = mat3(2.0340757369995117, -0.727334201335907, -0.3067416846752167, -0.22881317138671875, 1.2317301034927368, -0.0029169507324695587, -0.008569774217903614, -0.1532866358757019, 1.1618564128875732);\nfloat luma_romm(in vec3 color){\n    return dot(color, vec3(0.242655, 0.755158, 0.002187));\n}\nfloat luma(in vec3 color){\n    return dot(color, vec3(0.298839, 0.586811, 0.11435));\n}\nvec3 rgb2hsv(in vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 setHue(in vec3 res, in vec3 base) {\n    vec3 hsv = rgb2hsv(base);\n    vec3 res_hsv = rgb2hsv(res);\n    return hsv2rgb(vec3(hsv.x, res_hsv.y, res_hsv.z));\n}\nfloat gaussian(in float x) {\n    return 1.0 - exp(-PI*2.0*x*x);\n}\nvoid main() {\n    lowp vec4 col = texture2D(uTexture, vTextureCoord.xy);\n    lowp vec3 map = col.rgb;\n    vec3 base = col.rgb * matRGBtoROMM;\n    float base_lum = luma(col.rgb);\n    float map_lum = luma_romm(map * matRGBtoROMM);\n    float exposure = mix(uValue, 0.0, 1.0 - map_lum) * col.a;\n    float a = abs(exposure) * col.a + epsilon;\n    float v = pow(2.0, a+1.0)-2.0;\n    float m = mx - exp(-v);\n    vec3 res = (exposure > 0.0) ? (1.0 - exp(-v*base)) / m : log(1.0-base*m) / -v;\n    res = mix(base, res, min(a*100.0, 1.0));\n    res = setHue(res, base);\n    res = res * matROMMtoRGB;\n    finalColor = vec4(res, col.a);\n}\n";

exports.default = fragment;
//# sourceMappingURL=fragment.frag.js.map
