{"version":3,"file":"index.js","sources":["../../src/toning/index.ts"],"sourcesContent":["import {\n    BufferImageSource,\n    Color,\n    type ColorSource,\n    Filter,\n    GlProgram,\n    Texture,\n    TextureSource,\n} from 'pixi.js';\nimport vertex from '../defaults/default.vert';\nimport fragment from './fragment.frag';\n\nexport class Toning extends Filter\n{\n    private _imageData: ImageData;\n    private _lightColor: Color;\n    private _darkColor: Color;\n\n    private uniforms: {\n        uValue: number;\n        uLightColor: Float32Array;\n        uDarkColor: Float32Array;\n        uPaletteMap: Texture;\n    };\n    constructor(\n        value: number = 0,\n        lightColor: string = '#ff2200',\n        darkColor: string = '#ff00ff',\n    )\n    {\n        const glProgram = GlProgram.from({ fragment, vertex, name: 'toning' });\n        const texture = new Texture({\n            dynamic: true,\n            source: new TextureSource({\n                resource: new BufferImageSource({\n                    resource: new Uint8Array(4),\n                    width: 1,\n                    height: 1,\n                }),\n            }),\n        });\n\n        super({\n            glProgram,\n            resources: {\n                toningUniforms: {\n                    uValue: { value: 0, type: 'f32' },\n                    uLightColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uDarkColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uPaletteMap: { value: texture, type: 'sampler2D' },\n                },\n            },\n        });\n        this.uniforms = this.resources.toningUniforms.uniforms;\n        this._imageData = new ImageData(256, 1);\n        this._lightColor = new Color();\n        this._darkColor = new Color();\n        this.value = value;\n        this.lightColor = lightColor;\n        this.darkColor = darkColor;\n    }\n\n    public update()\n    {\n        const paletteMap = this._imageData;\n        const [r, g, b] = this.uniforms.uLightColor;\n        const [rDark, gDark, bDark] = this.uniforms.uDarkColor;\n\n        Toning.fillPaletteMap(\n            {\n                value: this.uniforms.uValue,\n                lightColor: { r: r * 255, g: g * 255, b: b * 255 },\n                darkColor: { r: rDark * 255, g: gDark * 255, b: bDark * 255 },\n            },\n            paletteMap,\n        );\n        const rawdata = new Uint8Array(Array.from(paletteMap.data)); // Uint8Array\n\n        this.uniforms.uPaletteMap.source.resource = new BufferImageSource({\n            resource: rawdata,\n            width: paletteMap.width,\n            height: paletteMap.height,\n        });\n    }\n\n    get value(): number\n    {\n        return this.uniforms.uValue;\n    }\n    set value(value: number)\n    {\n        this.uniforms.uValue = value;\n        this.update();\n    }\n\n    get lightColor(): ColorSource\n    {\n        return this._lightColor.value as ColorSource;\n    }\n    set lightColor(value: ColorSource)\n    {\n        this._lightColor.setValue(value);\n        this.uniforms.uLightColor.set(this._lightColor.toRgbArray());\n        this.update();\n    }\n\n    get darkColor(): ColorSource\n    {\n        return this._darkColor.value as ColorSource;\n    }\n    set darkColor(value: ColorSource)\n    {\n        this._darkColor.setValue(value);\n        this.uniforms.uDarkColor.set(this._darkColor.toRgbArray());\n        this.update();\n    }\n\n    static fillPaletteMap(\n        payload: {\n            value: number;\n            lightColor: { r: number; g: number; b: number };\n            darkColor: { r: number; g: number; b: number };\n        },\n        image: ImageData,\n    )\n    {\n        for (let s = 0; s < 256; ++s)\n        {\n            const i = s / 255;\n\n            image.data[4 * s] = Math.round(\n                payload.lightColor.r * i + payload.darkColor.r * (1 - i),\n            );\n            image.data[4 * s + 1] = Math.round(\n                payload.lightColor.g * i + payload.darkColor.g * (1 - i),\n            );\n            image.data[4 * s + 2] = Math.round(\n                payload.lightColor.b * i + payload.darkColor.b * (1 - i),\n            );\n        }\n    }\n}\n"],"names":["Filter","GlProgram","fragment","vertex","Texture","TextureSource","BufferImageSource","Color"],"mappings":";;;;;;AAYO,MAAM,eAAeA,cAC5B,CAAA;AAAA,EAWI,YACI,KAAgB,GAAA,CAAA,EAChB,UAAqB,GAAA,SAAA,EACrB,YAAoB,SAExB,EAAA;AACI,IAAM,MAAA,SAAA,GAAYC,kBAAU,IAAK,CAAA,YAAEC,0BAAUC,gBAAQ,EAAA,IAAA,EAAM,UAAU,CAAA,CAAA;AACrE,IAAM,MAAA,OAAA,GAAU,IAAIC,eAAQ,CAAA;AAAA,MACxB,OAAS,EAAA,IAAA;AAAA,MACT,MAAA,EAAQ,IAAIC,qBAAc,CAAA;AAAA,QACtB,QAAA,EAAU,IAAIC,yBAAkB,CAAA;AAAA,UAC5B,QAAA,EAAU,IAAI,UAAA,CAAW,CAAC,CAAA;AAAA,UAC1B,KAAO,EAAA,CAAA;AAAA,UACP,MAAQ,EAAA,CAAA;AAAA,SACX,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ,CAAA,CAAA;AAED,IAAM,KAAA,CAAA;AAAA,MACF,SAAA;AAAA,MACA,SAAW,EAAA;AAAA,QACP,cAAgB,EAAA;AAAA,UACZ,MAAQ,EAAA,EAAE,KAAO,EAAA,CAAA,EAAG,MAAM,KAAM,EAAA;AAAA,UAChC,WAAA,EAAa,EAAE,KAAO,EAAA,IAAI,aAAa,CAAC,CAAA,EAAG,MAAM,WAAY,EAAA;AAAA,UAC7D,UAAA,EAAY,EAAE,KAAO,EAAA,IAAI,aAAa,CAAC,CAAA,EAAG,MAAM,WAAY,EAAA;AAAA,UAC5D,WAAa,EAAA,EAAE,KAAO,EAAA,OAAA,EAAS,MAAM,WAAY,EAAA;AAAA,SACrD;AAAA,OACJ;AAAA,KACH,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,QAAA,GAAW,IAAK,CAAA,SAAA,CAAU,cAAe,CAAA,QAAA,CAAA;AAC9C,IAAA,IAAA,CAAK,UAAa,GAAA,IAAI,SAAU,CAAA,GAAA,EAAK,CAAC,CAAA,CAAA;AACtC,IAAK,IAAA,CAAA,WAAA,GAAc,IAAIC,aAAM,EAAA,CAAA;AAC7B,IAAK,IAAA,CAAA,UAAA,GAAa,IAAIA,aAAM,EAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAClB,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;AAAA,GACrB;AAAA,EAEO,MACP,GAAA;AACI,IAAA,MAAM,aAAa,IAAK,CAAA,UAAA,CAAA;AACxB,IAAA,MAAM,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,GAAI,KAAK,QAAS,CAAA,WAAA,CAAA;AAChC,IAAA,MAAM,CAAC,KAAO,EAAA,KAAA,EAAO,KAAK,CAAA,GAAI,KAAK,QAAS,CAAA,UAAA,CAAA;AAE5C,IAAO,MAAA,CAAA,cAAA;AAAA,MACH;AAAA,QACI,KAAA,EAAO,KAAK,QAAS,CAAA,MAAA;AAAA,QACrB,UAAA,EAAY,EAAE,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,GAAG,CAAI,GAAA,GAAA,EAAK,CAAG,EAAA,CAAA,GAAI,GAAI,EAAA;AAAA,QACjD,SAAA,EAAW,EAAE,CAAA,EAAG,KAAQ,GAAA,GAAA,EAAK,GAAG,KAAQ,GAAA,GAAA,EAAK,CAAG,EAAA,KAAA,GAAQ,GAAI,EAAA;AAAA,OAChE;AAAA,MACA,UAAA;AAAA,KACJ,CAAA;AACA,IAAA,MAAM,UAAU,IAAI,UAAA,CAAW,MAAM,IAAK,CAAA,UAAA,CAAW,IAAI,CAAC,CAAA,CAAA;AAE1D,IAAA,IAAA,CAAK,QAAS,CAAA,WAAA,CAAY,MAAO,CAAA,QAAA,GAAW,IAAID,yBAAkB,CAAA;AAAA,MAC9D,QAAU,EAAA,OAAA;AAAA,MACV,OAAO,UAAW,CAAA,KAAA;AAAA,MAClB,QAAQ,UAAW,CAAA,MAAA;AAAA,KACtB,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,KAAK,QAAS,CAAA,MAAA,CAAA;AAAA,GACzB;AAAA,EACA,IAAI,MAAM,KACV,EAAA;AACI,IAAA,IAAA,CAAK,SAAS,MAAS,GAAA,KAAA,CAAA;AACvB,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,UACJ,GAAA;AACI,IAAA,OAAO,KAAK,WAAY,CAAA,KAAA,CAAA;AAAA,GAC5B;AAAA,EACA,IAAI,WAAW,KACf,EAAA;AACI,IAAK,IAAA,CAAA,WAAA,CAAY,SAAS,KAAK,CAAA,CAAA;AAC/B,IAAA,IAAA,CAAK,SAAS,WAAY,CAAA,GAAA,CAAI,IAAK,CAAA,WAAA,CAAY,YAAY,CAAA,CAAA;AAC3D,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,SACJ,GAAA;AACI,IAAA,OAAO,KAAK,UAAW,CAAA,KAAA,CAAA;AAAA,GAC3B;AAAA,EACA,IAAI,UAAU,KACd,EAAA;AACI,IAAK,IAAA,CAAA,UAAA,CAAW,SAAS,KAAK,CAAA,CAAA;AAC9B,IAAA,IAAA,CAAK,SAAS,UAAW,CAAA,GAAA,CAAI,IAAK,CAAA,UAAA,CAAW,YAAY,CAAA,CAAA;AACzD,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GAChB;AAAA,EAEA,OAAO,cACH,CAAA,OAAA,EAKA,KAEJ,EAAA;AACI,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,EAAE,CAC3B,EAAA;AACI,MAAA,MAAM,IAAI,CAAI,GAAA,GAAA,CAAA;AAEd,MAAM,KAAA,CAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA,GAAK,IAAK,CAAA,KAAA;AAAA,QACrB,QAAQ,UAAW,CAAA,CAAA,GAAI,IAAI,OAAQ,CAAA,SAAA,CAAU,KAAK,CAAI,GAAA,CAAA,CAAA;AAAA,OAC1D,CAAA;AACA,MAAA,KAAA,CAAM,IAAK,CAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,GAAK,IAAK,CAAA,KAAA;AAAA,QACzB,QAAQ,UAAW,CAAA,CAAA,GAAI,IAAI,OAAQ,CAAA,SAAA,CAAU,KAAK,CAAI,GAAA,CAAA,CAAA;AAAA,OAC1D,CAAA;AACA,MAAA,KAAA,CAAM,IAAK,CAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,GAAK,IAAK,CAAA,KAAA;AAAA,QACzB,QAAQ,UAAW,CAAA,CAAA,GAAI,IAAI,OAAQ,CAAA,SAAA,CAAU,KAAK,CAAI,GAAA,CAAA,CAAA;AAAA,OAC1D,CAAA;AAAA,KACJ;AAAA,GACJ;AACJ;;;;"}